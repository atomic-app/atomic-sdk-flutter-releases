/**
 * Represents a request to trigger an event on the Atomic Platform.
 */
class AACEventPayload {
  /**
   * The name of the event to trigger. Required.
   */
  final String name;
  /**
   * An optional lifecycle ID to use for the event.
   */
  String? lifecycleId;
  /**
   * A dictionary of optional key-value pairs to provide to the event.
   */
  Map<String, dynamic>? detail;
  /**
   * A dictionary of optional key-value pairs to use as metadata for the event.
   */
  Map<String, dynamic>? metadata;
  /**
   * A dictionary of optional key-value pairs to use as custom data for push notifications for the event.
   */
  Map<String, dynamic>? notificationDetail;

  /**
   * Creates a new event payload, for the event with the specified name.
   * [name] is the name of the event to trigger on the Atomic Platform.
   */
  AACEventPayload(this.name);

  Map<String, dynamic> toJson() {
    return {
      'name': name,
      'lifecycleId': lifecycleId ?? "",
      'detail': detail ?? {},
      'metadata': metadata ?? {},
      'notificationDetail': notificationDetail ?? {}
    };
  }
}

/**
 * Event Result Classes
 */

/**
 * Represents a single event that was successfully processed by the Atomic Platform.
 */
class AACProcessedEvent {
  /**
      The name of the event that was processed.
   */
  final String name;

  /**
      The lifecycle identifier for the event. If one was not provided when the event was created, this property
      stores the identifier generated by the Atomic Platform.
   */
  final String lifecycleId;

  /**
      The version number of the event that was processed.
   */
  final int version;

  AACProcessedEvent.fromJson(dynamic json): name = json["name"], lifecycleId = json["lifecycleId"], version = json["version"];

  Map<String, dynamic> get toJson {
    return {
      'name': name,
      'lifecycleId': lifecycleId,
      'version': version
    };
  }
}
/**
 * Represents the response received from the Atomic Platform once an SDK generated event has been
 * processed successfully.
 */
class AACEventResponse {
  /**
      The identifier for the batch of events that were generated.
   */
  final String batchId;
  /**
      An array of the events that were successfully processed by the Atomic Platform.
   */
  late List<AACProcessedEvent> processedEvents;

  AACEventResponse.fromJson(dynamic json):batchId=json["batchId"] {
    processedEvents = [];
    for(final processedRaw in json["processedEvents"]) {
      processedEvents.add(AACProcessedEvent.fromJson(processedRaw));
    }
  }

  Map<String, dynamic> get toJson {
    Map<String, dynamic> value = {
      'batchId': batchId,
    };
    List<Map<String, dynamic>> processedEventsJson = [];
    for(AACProcessedEvent event in processedEvents) {
      processedEventsJson.add(event.toJson);
    }
    value['processedEvents'] = processedEventsJson;
    return value;
  }
}